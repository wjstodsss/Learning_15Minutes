//Lv.1 크레인 인형 뽑기
//스택 peek시전시 스택이 비웠는지 확인 해야 함 폭발이 일어나지않을 때도 break; 탈출해야함
//처음에는 x축과 y축을 반전하여 새로운 2차원을 만들어서 사용 했으나 풀이과정에서 필요 없을 발견함
//스택을 사용하지 않고 배열 풀이 시간이 너무 잘가...ㅋㅋ..ㅋㅋ음  
//이클립스 버전
import java.util.Stack;
public class P_Lv1_ClawMachine {
	public static void main(String[] args) {
		int [][] board = {
				{0,0,0,0,0},
				{0,0,1,0,3},
				{0,2,3,0,3},
				{4,2,4,4,2},
				{3,5,1,3,1}				
		};
		int[] moves = {1,5,3,5,1,2,1,4};
		int answer = 0;
			
		Stack<Integer> stack = new Stack<Integer>();
		
		for(int i=0; i<moves.length;i++) {
			for(int j=0; j<board.length;j++) {
				//System.out.print(board[j][moves[i]-1]);
				if(board[j][moves[i]-1]!=0 ) {
					if(!stack.isEmpty() && stack.peek()==board[j][moves[i]-1]) {
						//System.out.print(board[j][moves[i]-1]);
						stack.pop();
						answer+=2;
						board[j][moves[i]-1] = 0;
						break;
					
					}
					else {
						stack.push(board[j][moves[i]-1]);
						//System.out.print(stack);
						board[j][moves[i]-1] = 0;
						break;
					}
				}
			}
		}
		System.out.print(answer);
	}
}
//프로그래머스 버전
import java.util.Stack;
class Solution {
    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        Stack<Integer> stack = new Stack<Integer>();
        for(int i=0; i<moves.length;i++){
            for(int j=0;j<board.length;j++) {
                if(board[j][moves[i]-1]!=0) {
                    if(!stack.isEmpty() && stack.peek()==board[j][moves[i]-1]) {
                        stack.pop();
                        answer+=2;
                        board[j][moves[i]-1] = 0;
                        break;
                    }
                    else {
                        stack.push(board[j][moves[i]-1]);
                        board[j][moves[i]-1] = 0;
                        break;
                    }
                }
            }
        }
        return answer;
    }
}
